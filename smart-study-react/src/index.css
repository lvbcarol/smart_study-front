import React, { useState } from "react";
import { motion } from "framer-motion";

// Componente de Notificação para substituir os alertas
const Notification = ({ message, type, onClose }) => {
  if (!message) return null;

  const baseClasses = "p-4 rounded-md text-white text-center mb-4 transition-opacity duration-300";
  const typeClasses = type === 'success' ? 'bg-green-500' : 'bg-red-500';

  // Desaparece após 5 segundos
  setTimeout(onClose, 5000);

  return (
    <div className={`${baseClasses} ${typeClasses}`}>
      {message}
    </div>
  );
};


export default function App() {
  // Estado para os campos do formulário
  const [nome, setNome] = useState("");
  const [email, setEmail] = useState("");
  const [senha, setSenha] = useState("");
  const [confirmarSenha, setConfirmarSenha] = useState("");
  
  // Estado para a notificação
  const [notification, setNotification] = useState({ message: '', type: '' });
  
  // Estado para simular o carregamento
  const [isLoading, setIsLoading] = useState(false);

  // Função para lidar com o envio do formulário de registro
  const handleRegister = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setNotification({ message: '', type: '' });

    // Validação de senha
    if (senha !== confirmarSenha) {
      setNotification({ message: "As senhas não coincidem!", type: "error" });
      setIsLoading(false);
      return;
    }

    // Simulação de chamada de API com setTimeout
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Simulando uma resposta de sucesso da API
      // const res = { status: 201 };
      // if (res.status === 201) {
      setNotification({ message: "Cadastro realizado com sucesso!", type: "success" });
      // Limpa o formulário após o sucesso
      setNome('');
      setEmail('');
      setSenha('');
      setConfirmarSenha('');
      // } else {
      //   setNotification({ message: "Erro ao cadastrar.", type: "error" });
      // }
    } catch (err) {
      // Simulando um erro da API
      console.error("Erro ao cadastrar:", err);
      setNotification({ message: "Erro ao conectar com o servidor.", type: "error" });
    } finally {
        setIsLoading(false);
    }
  };

  return (
    // Container principal com gradiente de fundo roxo escuro
    <div className="min-h-screen bg-gradient-to-br from-[#2a0d5e] to-[#1e0050] flex flex-col md:flex-row items-center justify-center p-4 font-sans">
      
      {/* Lado Esquerdo: Logo e Nome da Marca */}
      <div className="w-full md:w-2/5 flex flex-col items-center justify-center text-white text-center p-8 mb-8 md:mb-0">
        {/* Placeholder para o logo */}
        <div className="w-48 h-48 md:w-60 md:h-60 bg-gray-200/10 rounded-full flex items-center justify-center border-4 border-white/20 mb-4">
            <span className="text-8xl font-bold text-white opacity-80">S</span>
        </div>
        <h1 className="text-5xl lg:text-6xl font-bold">Smart Study</h1>
      </div>

      {/* Lado Direito: Formulário de Cadastro */}
      <div className="w-full md:w-3/5 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.7, ease: "easeInOut" }}
          className="w-full max-w-md bg-white rounded-xl shadow-2xl p-8"
        >
          <h2 className="text-2xl font-bold mb-6 text-black uppercase text-left">
            CREATE YOUR ACCOUNT!
          </h2>

          <form onSubmit={handleRegister} className="space-y-4">
            
            <Notification 
                message={notification.message} 
                type={notification.type}
                onClose={() => setNotification({ message: '', type: '' })}
            />
            
            {/* Campo Nome */}
            <input
              type="text"
              className="w-full p-3 border border-black placeholder-gray-500 text-black focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="name"
              value={nome}
              onChange={(e) => setNome(e.target.value)}
              required
              disabled={isLoading}
            />
            {/* Campo E-mail */}
            <input
              type="email"
              className="w-full p-3 border border-black placeholder-gray-500 text-black focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="e-mail adress"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              disabled={isLoading}
            />
            {/* Campo Senha */}
            <input
              type="password"
              className="w-full p-3 border border-black placeholder-gray-500 text-black focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="password"
              value={senha}
              onChange={(e) => setSenha(e.target.value)}
              required
              disabled={isLoading}
            />
            {/* Campo Confirmar Senha */}
            <input
              type="password"
              className="w-full p-3 border border-black placeholder-gray-500 text-black focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="confirm password"
              value={confirmarSenha}
              onChange={(e) => setConfirmarSenha(e.target.value)}
              required
              disabled={isLoading}
            />

            {/* Botão de Envio */}
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              type="submit"
              className="w-full py-3 font-bold text-white text-md bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={isLoading}
            >
              {isLoading ? 'CREATING...' : 'NEXT'}
            </motion.button>
          </form>

          {/* Seção de Login */}
          <div className="text-center mt-5 text-black">
            <p className="text-sm">Already have an account?</p>
            <a
              href="#" // Substituído Link por <a>
              className="inline-block border border-black mt-2 px-8 py-2 text-black font-semibold hover:bg-gray-100 transition"
            >
              LOG IN
            </a>
          </div>

          {/* Termos e Condições */}
          <p className="mt-6 text-[11px] text-center text-gray-500">
            By registering, You agree to the <br />
            <a href="#" className="underline">Terms, Conditions and Policies</a> of Borcelle
            & <a href="#" className="underline">Privacy Policy</a>
          </p>
        </motion.div>
      </div>
    </div>
  );
}
